#include <QApplication>
 #include <QDebug>
 #include <QFont>
 #include <QGridLayout>
 #include <QHBoxLayout>
 #include <QLCDNumber>
 #include <QLabel>
 #include <QPushButton>
 #include <QShortcut>
 #include <QVBoxLayout>
 #include <QWidget>
 #include <QDialog>
 #include <QDir>
 #include <QTextStream>
 #include <QTimer>
 #include <QString>
 #include <QStringList>
 #include <QLineEdit>
 #include <QPlainTextEdit>

 #include <QGroupBox>
 #include <QRadioButton>
 #include <QCheckBox>

 #include "gameboard.h"
 #include "soccerfield.h"
 #include <math.h>
 #include <iostream>

#include <iostream>
using std::cerr;
using std::cout;
using std::endl;

#include <fstream>
using std::ofstream;
using std::ifstream;



GameBoard::GameBoard(QWidget *parent)
     : QWidget(parent)
 {

     QFrame *soccerBox = new QFrame;
     soccerBox->setFrameStyle(QFrame::WinPanel | QFrame::Sunken);

     soccerField = new SoccerField;

     QPushButton *stop = createButton("", ":/Icons/Pause", 1);
     QPushButton *continua = createButton("", ":/Icons/Play", 1);
     QPushButton *restart = createButton("&Iniciar", "-", 1);
     QPushButton *theEnd = createButton("", ":/Icons/Stop", 1);
     QPushButton *stepF = createButton("", ":/Icons/StepForwardBlue", 1);
     QPushButton *saveGame = createButton("&Salvar Jogo", "-", 0);
     QPushButton *recordPos = createButton("Salvar &Posicoes", "-", 0);
     QPushButton *loadGame = createButton("Carregar Jogo", "-", 0);
     QPushButton *loadPos = createButton("Carregar Posicoes", "-", 0);
     QPushButton *opcoes = createButton("",":/Icons/Settings",1);



     connect(stop, SIGNAL(clicked()), this, SLOT(stopped()));
     connect(continua, SIGNAL(clicked()), this, SLOT(continueGame()));
     connect(restart, SIGNAL(clicked()), this, SLOT(newGame()));
     connect(theEnd, SIGNAL(clicked()), this, SLOT(endGame()));
     connect(stepF, SIGNAL(clicked()), this, SLOT(next()));
     connect(saveGame, SIGNAL(clicked()), this, SLOT(writing()));
     connect(loadGame, SIGNAL(clicked()), this, SLOT(reading()));
     connect(recordPos, SIGNAL(clicked()), this, SLOT(savePos()));
     connect(loadPos, SIGNAL(clicked()), this, SLOT(loadPosition()));
     connect(opcoes, SIGNAL(clicked()), this, SLOT(configura()));

     time1 = createLCD();
     time2 = createLCD();
     timerMin = createLCD();
     timerSeg = createLCD();

     connect(soccerField, SIGNAL(timer()), this, SLOT(timer()));

     QLabel *labelTime1 = new QLabel(tr("Time 1\n Nome\n Cor"));
     QLabel *labelTime2 = new QLabel(tr("Time 2\n Nome\n Cor"));
     QLabel *versus = new QLabel(tr("X"));
     QLabel *pontos = new QLabel(tr(":"));
     pontos->setFont(QFont("Times", 32));
     QLabel *menuLabel = new QLabel(tr(""));
     QLabel *infoLabel = new QLabel(tr("        Modo   \n   avisos info\n          etc\n"));

     groupBox = new QGroupBox(tr("Mudar Fonte:"));
     groupBox->setCheckable(false);
     groupBox->setChecked(true);
     connect(groupBox, SIGNAL(clicked()), this, SLOT(stopped()));

     QRadioButton *radio1 = new QRadioButton(tr("Simulador"));
     QRadioButton *radio2 = new QRadioButton(tr("Arquivo"));
     radio1->setChecked(true);
     connect(radio1, SIGNAL(clicked()), this, SLOT(modoSimulador()));
     connect(radio2, SIGNAL(clicked()), this, SLOT(modoArquivo()));

     QVBoxLayout *vbox = new QVBoxLayout;
     vbox->addWidget(radio1);
     vbox->addWidget(radio2);
     vbox->addStretch(1);
     groupBox->setLayout(vbox);


     (void) new QShortcut(Qt::Key_I, this, SLOT(newGame()));
     (void) new QShortcut(Qt::Key_Space, this, SLOT(stopped()));
     (void) new QShortcut(Qt::Key_C, this, SLOT(continueGame()));
     (void) new QShortcut(Qt::CTRL + Qt::Key_Q, this, SLOT(close()));

     QHBoxLayout *topLayout = new QHBoxLayout;
     topLayout->addStretch(1);
     topLayout->addWidget(timerMin);
     topLayout->addWidget(pontos);
     topLayout->addWidget(timerSeg);
     topLayout->addStretch(1);
     topLayout->addWidget(labelTime1);
     topLayout->addWidget(time1);
     topLayout->addWidget(versus);
     topLayout->addWidget(time2);
     topLayout->addWidget(labelTime2);
     topLayout->addStretch(1);
     topLayout->addWidget(continua);
     topLayout->addWidget(stop);
     topLayout->addWidget(stepF);
     topLayout->addWidget(theEnd);
     topLayout->addWidget(opcoes);


     QVBoxLayout *leftLayout = new QVBoxLayout;
     leftLayout->addWidget(saveGame);
     leftLayout->addWidget(recordPos);
     leftLayout->addWidget(loadGame);
     leftLayout->addWidget(loadPos);
     leftLayout->addWidget(groupBox);
     leftLayout->addStretch(1);
     leftLayout->addWidget(infoLabel, 0, 0);
     leftLayout->addStretch(1);

     QVBoxLayout *soccerLayout = new QVBoxLayout;
     soccerLayout->addWidget(soccerField);
     soccerBox->setLayout(soccerLayout);


     QGridLayout *gridLayout = new QGridLayout;
     gridLayout->addWidget(restart, 0, 0);
     gridLayout->addLayout(topLayout, 0, 1);
     gridLayout->addLayout(leftLayout, 1, 0);
     gridLayout->addWidget(soccerBox, 1, 1, 2, 1);
     gridLayout->setColumnStretch(1, 10);
     setLayout(gridLayout);


     updateTimer = new QTimer(this);
     connect(updateTimer, SIGNAL(timeout()), this, SLOT(getGoals()));
     updateTimer->start(MILISEC);

     //newGame();
 }

 QPushButton * GameBoard::createButton(char str[50], char icn[50], char n)
 {
    QPushButton *button = new QPushButton(tr(str));
    if (n==0) button->setFont(QFont("Times", 10));
    else if(n==1) button->setFont(QFont("Times", 18, QFont::Bold));
    if(icn[0]!='-'){  QPixmap bla(icn);
    button->setIcon(bla);  }
    return button;
 }

  QLCDNumber * GameBoard::createLCD()
 {
     QLCDNumber * LCD = new QLCDNumber(2);
     LCD->setSegmentStyle(QLCDNumber::Filled);
     return LCD;
 }

 void GameBoard::newGame()
 {
     groupBox->setChecked(false);
     time2->display(0);
     time1->display(0);
     timerSeg->display(0);
     timerMin->display(0);
     soccerField->restartGame();
 }

 void GameBoard::getGoals()
 {

     goal = soccerField->goalDisplay();
     if (goal == 0)
     {
         int i;
         i = time1->digitCount();
         time1->display(i+1);
     }
     else if (goal == 1)
     {
         int i;
         i = time2->digitCount();
         time2->display(i+1);
     }

 }


 void GameBoard::continueGame()
 {
     groupBox->setChecked(false);
     soccerField->manual = false;
 }

    void GameBoard::endGame()
 {
     soccerField->endGame();
     groupBox->setChecked(true);
 }

  void GameBoard::stopped()
 {
     groupBox->setChecked(true);
     soccerField->manual = true;
 }

   void GameBoard::next()
 {
     soccerField->manual = true;
     soccerField->getPose();
 }

  void GameBoard::modoSimulador()
 {
     soccerField->simulador = true;
 }

  void GameBoard::modoArquivo()
 {
     soccerField->simulador = false;
 }

 void GameBoard::timer()
 {
     int min = (int) soccerField->tempo/(DIVSEC*60);
     int sec = (int) soccerField->tempo/DIVSEC - min*60;
     timerMin->display(min);
     timerSeg->display(sec);
 }

  void GameBoard::writing()
 {
      soccerField->copyThis("jogo.dat", "jogo2.dat");
 }

  void GameBoard::reading()
 {
       soccerField->copyThis("jogo.dat", "jogoArq.dat");
 }

  void GameBoard::savePos()
 {
       soccerField->savePos("poses.dat", false);
 }

    void GameBoard::loadPosition()
 {
       soccerField->loadPos("poses.dat", 0, true);
 }

void GameBoard::configura()
        {

            //Pausa o Jogo para as Configurações
            stopped();

            //Cria a nova janela de configurações
            QDialog *janelaconfig = new QDialog;


            //Textos da nova janela e de identificação dos botões
            QLabel *Titulo = new QLabel("<big><b>Configuracoes</b></big>");
            QLabel *Key_Menu = new QLabel("Menu de Atalhos: ");
            QLabel *Configur = new QLabel("Configurar Parametros: ");


            //Caixa de organização de grupos
            QGroupBox *confBox = new QGroupBox;
            confBox->setCheckable(false);
            confBox->setChecked(true);

            //Botões da janela de configuração
            QPushButton *keys = new QPushButton("Atalhos do Teclado");
            QPushButton *ajuste = new QPushButton("Ajustes de Jogo");
            QPushButton *voltar = new QPushButton("Voltar");

            connect(keys, SIGNAL(clicked()), SLOT(Menu()));
            connect(ajuste, SIGNAL(clicked()), SLOT(Settings()));
            connect(voltar, SIGNAL(clicked()), this, SLOT(continueGame()));
            connect(voltar, SIGNAL(clicked()), janelaconfig, SLOT(close()));


            //Ajuste do Layout da Página
            QGridLayout *toplay = new QGridLayout;
            toplay->addWidget(Key_Menu, 0, 0);
            toplay->addWidget(keys,0, 1);
            toplay->addWidget(Configur, 1, 0);
            toplay->addWidget(ajuste, 1, 1);
            toplay->addWidget(voltar, 2, 1);


            confBox->setLayout(toplay);

            QVBoxLayout *leftlay = new QVBoxLayout;
            leftlay->addWidget(Titulo);
            leftlay->addWidget(confBox);


            janelaconfig->setLayout(leftlay);
            janelaconfig->setMinimumSize(300, 230);

            janelaconfig->show();








        }

        void GameBoard::Menu()
        {
            QDialog *menu = new QDialog;
            QLabel *texto = new QLabel;
            QLabel *title = new QLabel("<b><big>Atalhos</big></b>");

            QFile *config = new QFile("/home/vinicius/svn/unball/estrategia/visualization/Visualization Last Version/Visualization_last/Tabela.txt"); //Colocar o diretório ao qual se encontra o arquivo Tabela.txt

            if(!config->open(QFile::ReadOnly | QFile::Text))
            {
                return;
            }
            QTextStream mOut(config);
            QString mTexto = mOut.readAll();


            texto->setText(mTexto);

            QVBoxLayout *lay =new QVBoxLayout;
            lay->addWidget(title);
            lay->addWidget(texto);

            menu->setLayout(lay);
            menu->show();

            config->flush();
            mOut.flush();
            config->close();

        }



        void GameBoard::Settings()
        {
            QDialog *ajuste = new QDialog;


            QPushButton *mudar = new QPushButton("Mudar Parametros");

            connect(mudar, SIGNAL(clicked()), SLOT(change()));



            QLabel *texto = new QLabel;
            QLabel *title = new QLabel("<b><big>Atalhos</big></b>");

            QFile *config = new QFile("/home/vinicius/svn/unball/estrategia/visualization/Visualization Last Version/Visualization_last/Tabela.txt");//Colocar o diretório ao qual se encontra o arquivo Tabela.txt

            if(!config->open(QFile::ReadOnly | QFile::Text))
            {
                return;
            }
            QTextStream mOut(config);
            QString mTexto = mOut.readAll();

            texto->setText(mTexto);



            QVBoxLayout *lay =new QVBoxLayout;
            lay->addWidget(title);
            lay->addWidget(texto);
            lay->addWidget(mudar);

            ajuste->setLayout(lay);
            config->flush();
            mOut.flush();
            config->close();



            ajuste->show();

        }



        void GameBoard::change()
        {

            //Cria o arquivo para ser modificado
            QFile *config = new QFile("/home/vinicius/svn/unball/estrategia/visualization/Visualization Last Version/Visualization_last/Tabela.txt");//Colocar o diretório ao qual se encontra o arquivo Tabela.txt

            //Cria a janela de configurações
            QDialog *change = new QDialog;

            //Cria os editores para configurar o arquivo
            plainText = new QPlainTextEdit(change);


            //Cria os botões
            QPushButton *Mudar = new QPushButton("Mudar");
            QPushButton *Cancelar = new QPushButton("Cancelar");

            //Testa pra saber se o arquivo pode ser aberto
            if(config->open(QFile::ReadWrite | QFile::Text))
            {
                QTextStream in(config);
                QString arquivo = in.readAll();
                plainText->setPlainText(arquivo);

                in.flush();
                config->close();

            }



            //Cria Strings com o intuito de armazenar os dados das linhas de texto
            //Conecta os botões Mudar e Cancelar






            connect(Mudar, SIGNAL(clicked()),plainText, SLOT(selectAll()));
            connect(Mudar, SIGNAL(clicked()),plainText, SLOT(copy()));
            connect(Mudar, SIGNAL(clicked()), this, SLOT(salvar()));
            connect(Cancelar, SIGNAL(clicked()),change, SLOT(close()));







            //Cria os titulos de cada widget


            //Layout horizontal dos botões OK e Voltar
            QHBoxLayout *layh = new QHBoxLayout;
            layh->addWidget(Mudar);
            layh->addWidget(Cancelar);

            //Layout vertical das widgets incluido os botões alinhados horizontalmente.
            QVBoxLayout *lay =new QVBoxLayout;
            lay->addWidget(plainText);
            lay->addLayout(layh);

            change->setLayout(lay);
            change->show();


        }




        void GameBoard::salvar()
        {

            plainText->paste();
            modificado = plainText->toPlainText();

            //Cria o arquivo para ser modificado
           wfile = new QFile("/home/vinicius/svn/unball/estrategia/visualization/Visualization Last Version/Visualization_last/Tabela.txt");//Colocar o diretório ao qual se encontra o arquivo Tabela.txt
            qDebug() << "entrou no if";


            qDebug() << modificado;

            if(wfile->open(QIODevice::WriteOnly | QIODevice::Text))
            {
                qDebug() << "entrou no if";
                QTextStream stream(wfile);


                stream << modificado;

                stream.flush();
                wfile->close();

            }




        }
